# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  branch_pattern = "release-"
  develop_branch = "develop"
  



# sample : fastlane rollout track:beta percent:100
  desc "Submit a new bundle to Play store Alpha"
  lane :rollout do |options|

    default_track = "beta"
    default_percent = 0.05

    gradle(task: "clean bundleRelease")
    percent = options[:percent] ? options[:percent].to_f/100 : default_percent
    track = options[:track] ? options[:track] : default_track
    upload_to_play_store(track: track,  rollout: percent.to_s, skip_upload_images: true , skip_upload_screenshots: true)

  end



# sample1 : fastlane promot from:beta to:production 
# sample2 : fastlane promot 
desc "Submit a new bundle to Play store Alpha"
  lane :promot do |options|
    default_track_from = "beta"
    default_track_to = "production"
    upload_path = "../mapping"

    track_from = options[:from] 
    trrack_to =  options[:to] 

    track_from = track_from ? track_from : default_track_from
    trrack_to = trrack_to ? trrack_to : default_track_to
    upload_to_play_store(track: track_from, track_promote_to: trrack_to, skip_upload_images: true , skip_upload_screenshots: true, mapping: upload_path)
  end



# sample : fastlane rollout track:beta percent:100
  desc "Submit a new bundle to Play store Alpha"
  lane :assemble do 
    gradle(task: "clean bundleRelease")
  end


#sample : todo
  desc "notes"
  lane :notes do |options|
    version = options[:version]
    if version == nil 
      raise "Version can't be null".red
    end

    branch = branch_pattern+""+version
    sh "echo "+branch
 
    

    # sh "git checkout master"
    notes = changelog_from_git_commits(
      between: ["master", "release-01"],  # Optional, lets you specify a revision/tag range between which to collect commit info
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
    )
    add_git_tag( message: notes,tag: "v6")
  end


desc "code freeze"
lane :code_freeze do |options|
  version = options[:version]
    if version == nil 
      raise "Version can't be null".red
    end


    release_branch = branch_pattern+""+version
    
  ensure_git_status_clean
  sh "echo sh git checkout "+develop_branch
  sh "echo git pull --rebase"
  sh "echo git checkout -b "+release_branch
  sh "echo git push origin "+release_branch


end

end
