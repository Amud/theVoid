# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  



# sample : fastlane rollout track:beta percent:100
  desc "Submit a new bundle to Play store Alpha"
  lane :rollout do |options|

    default_track = "beta"
    default_percent = 0.05

    gradle(task: "clean bundleRelease")
    percent = options[:percent] ? options[:percent].to_f/100 : default_percent
    track = options[:track] ? options[:track] : default_track
    upload_to_play_store(track: track,  rollout: percent.to_s, skip_upload_images: true , skip_upload_screenshots: true)

  end



# sample1 : fastlane promot from:beta to:production 
# sample2 : fastlane promot 
desc "Submit a new bundle to Play store Alpha"
  lane :promot do |options|
    default_track_from = "beta"
    default_track_to = "production"
    upload_path = "../mapping"

    track_from = options[:from] 
    trrack_to =  options[:to] 

    track_from = track_from ? track_from : default_track_from
    trrack_to = trrack_to ? trrack_to : default_track_to
    upload_to_play_store(track: track_from, track_promote_to: trrack_to, skip_upload_images: true , skip_upload_screenshots: true, mapping: upload_path)
  end



# sample : fastlane rollout track:beta percent:100
  desc "Submit a new bundle to Play store Alpha"
  lane :assemble do 
    gradle(task: "clean bundleRelease")
  end




desc ""
lane :beta do |lane|

    # ensure you are in master branch
    ensure_git_branch

    # ensure that master branch is clean
    ensure_git_status_clean

    # check the semantic parameter entered
    if !lane[:bump]
        raise "No bump type defined! Use one of: patch | minor | major".red
    end

    # get the last commit comments from Git history
    # and creates our changelog
    comments = changelog_from_git_commits(
        between: [last_git_tag, "HEAD"],
        pretty: "- %s",
        date_format: "short",
        match_lightweight_tag: false, 
        merge_commit_filtering: "exclude_merges" 
    ) 

    # calculates the new version according to
    # the semantic version added
    type = lane[:bump]
    old = last_git_tag
    version = old

    
    

    # set the new version number
    increment_version_number(
        version_number: version
    )

    # increment build number
    increment_build_number

    # manage the certificates
    cert

    # manage the provisioning profiles
    sigh(
        adhoc: true
    )

    # build the iOS app
    gradle(task: "clean bundleRelease")

    # creates a bump version commit 
    commit_version_bump(
        message: "Version bumped to v#{version}",
        xcodeproj: "AppProject.xcodeproj"
    )

    # push bump commit
    push_to_git_remote(
        tags: false
    )

    # create a local tag with the new version
    add_git_tag(
        message: comments,
        tag: "v#{version}",
        prefix: "v",
        build_number: version
    )    

    # publish a new release into Github
    github_release = set_github_release(
        api_token: "7b19002dd8ffae9c9ff9dea114834344cea64015",
        repository_name: "https://github.com/Amud/theVoid",
        name: "#{type.capitalize} version v#{version}",
        tag_name: "v#{version}",
        description: comments,
        commitish: "master"
        # upload_assets: no assets supported
    )

    

end


end
